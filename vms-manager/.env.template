# Database environment variables

# Postgres DB name (e.g. postgres)
POSTGRES_DB=
# Postgres user (e.g. postgres)
POSTGRES_USER=
# Postgres user password (e.g. secret)
POSTGRES_PASSWORD=
PGDATA=/var/lib/postgresql/data

# Application environment variables
DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
# Listen URL of the vms manager's API
API_URL=http://0.0.0.0:8000 
# Server Agents API URLs, separated by commas (e.g. "http://127.0.0.1:8081,http://172.16.200.15:8082")
SERVER_AGENTS_API_URLS=
LIST_BASE_IMAGES_ENDPOINT=/bases
BASE_TEMPLATES_ENDPOINT=/templates
DEFINE_TEMPLATE_ENDPOINT=${BASE_TEMPLATES_ENDPOINT}/define
DELETE_TEMPLATE_ENDPOINT=${BASE_TEMPLATES_ENDPOINT}/delete
BASE_INSTANCES_ENDPOINT=/instances
CREATE_INSTANCE_ENDPOINT=${BASE_INSTANCES_ENDPOINT}/create
DELETE_INSTANCE_ENDPOINT=${BASE_INSTANCES_ENDPOINT}/delete
START_INSTANCE_ENDPOINT=${BASE_INSTANCES_ENDPOINT}/start
STOP_INSTANCE_ENDPOINT=${BASE_INSTANCES_ENDPOINT}/stop
RESTART_INSTANCE_ENDPOINT=${BASE_INSTANCES_ENDPOINT}/restart
LIST_INSTANCES_STATUS_ENDPOINT=${BASE_INSTANCES_ENDPOINT}/status
LIST_SERVERS_STATUS_ENDPOINT=/servers/status
GET_RESOURCE_STATUS_ENDPOINT=/resource-status
SERVER_AGENT_IS_ALIVE_ENDPOINT=/is-alive

# VMs Network parameters
VMS_DNS_1=8.8.8.8
VMS_DNS_2=8.8.4.4

# RouterOS parameters
# Listen URL of the Mikrotik router's API (e.g. 127.0.0.1:8728)
ROUTEROS_API_URL=
# Router's username (e.g. admin)
ROUTEROS_API_USERNAME=
# Router's password (e.g. admin)
ROUTEROS_API_PASSWORD=
# Router's interface where the VLAN's will live in (e.g. bridge0)
ROUTEROS_VLAN_BRIDGE=
# Router's tagged bridges, this atleast needs to contain the vlan bridge and the external network
# interface, separated by commas (e.g. "${ROUTEROS_VLAN_BRIDGE},ether2")
ROUTEROS_TAGGED_BRIDGES=
# Router's default gateway to the external network
ROUTEROS_EXTERNAL_GATEWAY=


